publish 資料表
    #		名稱	
	1		pid：自增主鍵 
	2		title：案件標題 
	3		contact_name：聯絡人名稱 
	4		completion_time：案件完成時間 
	5		budget：預算金額 
	6		location：執行地點 
	7		phone：聯絡人電話 
	8		email：聯絡人 
	9		Email details：需求詳情 
	10		require_code：需求語言
	11		created_at：記錄創建時間 
	12		updated_at：記錄更新時間

userinfo 資料表		
	uid: 自動遞增的唯一ID。

	profile_picture: 儲存大頭照的URL，允許空值。

	username: 使用者名稱，可以空值。

	nickname: 使用者的暱稱，可以空值。

	company_name: 企業名稱，可以空值。

	job_title: 使用者的接案身分（例如，開發者、設計師等），可以空值。

	location: 使用者的居住地，可以空值。

	contact_phone: 使用者的連絡電話，可以空值。

	phone_verified: 電話是否已認證，BOOLEAN類型，用於表示 true 或 false。

	email: 使用者的電子信箱，這是一個必填欄位，設置為唯一，確保每個使用者的電子信箱都是獨一無二

	email_verified: 電子信箱是否已認證，BOOLEAN類型，用於表示 true 或 false。

	line_id: 使用者的 LINE ID，可以空值。

	login_status: 使用者的登入狀態，使用 ENUM 類型限制只允許 online 或 offline。(目前不做)

	job_status: 使用者是否可接案，BOOLEAN類型，用於表示 true 或 false。

	rating: 使用者的星數評價，使用 TINYINT 並加上 CHECK 條件限制範圍在1到5之間。

	preferred_location: 理想的接案地區，可以空值。

	job_category: 接案類別，可以空值。

	accumulated_experience: 累積經驗，使用 TEXT 類型以存儲較長的描述。

	job_experience: 接案經驗，使用 TEXT 類型以存儲較長的描述。
	
	

	
	
	



	 
	 		
	 		
	
		 
	 
	 
		 	
		 	
















如果你想從另一個資料表提取不同的資料並在同一個元件中顯示，可以使用多個 useEffect 來分別提取資料，或者在同一個 useEffect 中進行多次 API 調用。以下是一些步驟和範例，展示如何將資料從多個資料表提取並合併到同一個元件中：
	方法 1：使用多個 useEffect 鉤子分別提取資料
		描述
		這個方法是將每個資料表的資料提取放在各自獨立的 useEffect 鉤子中。每個 useEffect 鉤子只負責一次 API 請求和數據設置。

		優點
		簡潔和清晰：每個 useEffect 鉤子專注於一項特定的資料提取任務，使代碼更易於理解和維護。

		並行數據提取：各個 useEffect 鉤子獨立運行，可以並行提取資料，不會相互影響。

		缺點
		重複的邏輯：如果有多個資料提取邏輯，需要重複編寫類似的代碼，可能導致代碼的冗餘。

		性能考量：過多的 useEffect 鉤子可能會增加組件的渲染次數，影響性能。

		適用場景
		簡單的資料提取需求：當資料提取邏輯較為簡單，每個 API 請求相互獨立時，這個方法是首選。

		獨立的資料來源：當每個資料表之間無依賴關係或聯繫時，使用多個 useEffect 是理想的選擇。

		範例
		import React, { useEffect, useState } from 'react';
		import axios from 'axios';

		const Testfreelance = () => {
			const [publishData, setPublishData] = useState([]);
			const [otherData, setOtherData] = useState([]); // 新的資料狀態

			useEffect(() => {
				const fetchData = async () => {
					try {
						const response = await axios.get('/api/get-publishes');
						setPublishData(Array.isArray(response.data) ? response.data : []);
					} catch (error) {
						console.error('Error fetching data', error);
					}
				};

				fetchData();
			}, []);

			useEffect(() => {
				const fetchOtherData = async () => {
					try {
						const response = await axios.get('/api/get-other-data'); // 另一個 API 路徑
						setOtherData(Array.isArray(response.data) ? response.data : []);
					} catch (error) {
						console.error('Error fetching other data', error);
					}
				};

				fetchOtherData();
			}, []);

			return (
				<div>
					{publishData.map((item) => (
						<div key={item.id}>
							{/* 根據你的需求顯示 publishData 資料 */}
							<p>{item.title}</p>
						</div>
					))}
					{otherData.map((item) => (
						<div key={item.id}>
							{/* 根據你的需求顯示 otherData 資料 */}
							<p>{item.someField}</p>
						</div>
					))}
				</div>
			);
		};

		export default Testfreelance;


	方法 2：在同一個 useEffect 中合併多個 API 請求
		描述
		這個方法是在一個 useEffect 鉤子中進行多次 API 請求，然後將結果合併在一起並設置到一個狀態變量中。

		優點
		簡化的邏輯：所有資料提取邏輯集中在一個地方，使代碼更易於管理。

		減少重複：避免了在多個 useEffect 鉤子中重複編寫類似的資料提取代碼。

		缺點
		同步問題：需要確保所有 API 請求都成功完成後，才能正確合併資料並設置狀態，這可能需要額外的錯誤處理和同步邏輯。

		單一責任：一個 useEffect 承擔多個 API 請求的責任，可能會使代碼看起來稍微複雜一些。

		適用場景
		需要合併資料：當來自不同資料表的資料需要合併在一起顯示時，這個方法非常適用。

		較少的 API 請求：當 API 請求數量較少且彼此相關時，這個方法是理想的選擇。

		範例:
		import React, { useEffect, useState } from 'react';
		import axios from 'axios';

		const Testfreelance = () => {
			const [data, setData] = useState([]);

			useEffect(() => {
				const fetchData = async () => {
					try {
						const publishResponse = await axios.get('/api/get-publishes');
						const otherResponse = await axios.get('/api/get-other-data');

						const combinedData = publishResponse.data.map((publishItem, index) => {
							return {
								...publishItem,
								otherField: otherResponse.data[index]?.otherField // 合併其他資料字段
							};
						});

						setData(combinedData);
					} catch (error) {
						console.error('Error fetching data', error);
					}
				};

				fetchData();
			}, []);

			return (
				<div>
					{data.map((item) => (
						<div key={item.id}>
							{/* 根據你的需求顯示合併後的資料 */}
							<p>{item.title}</p>
							<p>{item.otherField}</p>
						</div>
					))}
				</div>
			);
		};

		export default Testfreelance;
